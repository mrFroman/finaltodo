{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\mrfro\\\\Desktop\\\\finaltodo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\mrfro\\\\Desktop\\\\finaltodo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\nvar _this2 = this,\n    _jsxFileName = \"C:\\\\Users\\\\mrfro\\\\Desktop\\\\finaltodo\\\\src\\\\components\\\\Todo.js\";\n\nimport { makeAutoObservable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { todosState } from \"../todoState\";\n\nfunction usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nvar TodoState = function TodoState() {\n  var _this = this;\n\n  _classCallCheck(this, TodoState);\n\n  this.newName = \"\";\n  this.isEditing = false;\n  this.currentTask = null;\n\n  this.handleChange = function (e) {\n    _this.newName = e.target.value;\n  };\n\n  this.handleSubmit = function (e) {\n    e.preventDefault();\n\n    if (!_this.newName.trim()) {\n      return;\n    }\n\n    todosState.editTask(_this.currentTask, _this.newName);\n    _this.newName = \"\";\n    _this.isEditing = false;\n  };\n\n  this.setEditFalse = function () {\n    _this.isEditing = false;\n  };\n\n  this.setEditTrue = function () {\n    _this.isEditing = true;\n  };\n\n  this.toggleTaskCompleted = function () {\n    todosState.toggleTaskCompleted(_this.currentTask);\n  };\n\n  this.deleteTask = function () {\n    todosState.deleteTask(_this.currentTask);\n  };\n\n  makeAutoObservable(this);\n};\n\nvar Todo = observer(function (props) {\n  var task = props.task;\n\n  var _useState = useState(function () {\n    return new TodoState();\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      state = _useState2[0];\n\n  state.currentTask = task;\n  var newName = state.newName,\n      isEditing = state.isEditing;\n  var editingTemplate = /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: state.handleSubmit,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"text\",\n    value: newName,\n    onChange: state.handleChange,\n    autoFocus: true,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn warning\",\n    onClick: state.setEditFalse,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, \"\\u0412\\u044B\\u0445\\u043E\\u0434\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn success\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"));\n  var viewTemplate = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    id: task.id,\n    type: \"checkbox\",\n    className: \"checkbox\",\n    checked: task.completed,\n    onChange: state.toggleTaskCompleted,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text \".concat(task.completed && \"completed\"),\n    htmlFor: task.id,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, task.name), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn info \".concat(task.completed && \"disabled\"),\n    onClick: state.setEditTrue,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn danger\",\n    onClick: state.deleteTask,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"));\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"item\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }, isEditing ? editingTemplate : viewTemplate);\n});\nexport default Todo;","map":{"version":3,"sources":["C:/Users/mrfro/Desktop/finaltodo/src/components/Todo.js"],"names":["makeAutoObservable","observer","React","useEffect","useRef","useState","todosState","usePrevious","value","ref","current","TodoState","newName","isEditing","currentTask","handleChange","e","target","handleSubmit","preventDefault","trim","editTask","setEditFalse","setEditTrue","toggleTaskCompleted","deleteTask","Todo","props","task","state","editingTemplate","viewTemplate","id","completed","name"],"mappings":";;;;;;AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAMC,GAAG,GAAGL,MAAM,EAAlB;AACAD,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACD,GAFQ,CAAT;AAGA,SAAOC,GAAG,CAACC,OAAX;AACD;;IAEKC,S,GAKJ,qBAAc;AAAA;;AAAA;;AAAA,OAJdC,OAIc,GAJJ,EAII;AAAA,OAHdC,SAGc,GAHF,KAGE;AAAA,OAFdC,WAEc,GAFA,IAEA;;AAAA,OAIdC,YAJc,GAIC,UAACC,CAAD,EAAO;AACpB,IAAA,KAAI,CAACJ,OAAL,GAAeI,CAAC,CAACC,MAAF,CAAST,KAAxB;AACD,GANa;;AAAA,OAQdU,YARc,GAQC,UAACF,CAAD,EAAO;AACpBA,IAAAA,CAAC,CAACG,cAAF;;AACA,QAAI,CAAC,KAAI,CAACP,OAAL,CAAaQ,IAAb,EAAL,EAA0B;AACxB;AACD;;AACDd,IAAAA,UAAU,CAACe,QAAX,CAAoB,KAAI,CAACP,WAAzB,EAAsC,KAAI,CAACF,OAA3C;AACA,IAAA,KAAI,CAACA,OAAL,GAAe,EAAf;AACA,IAAA,KAAI,CAACC,SAAL,GAAiB,KAAjB;AACD,GAhBa;;AAAA,OAkBdS,YAlBc,GAkBC,YAAM;AACnB,IAAA,KAAI,CAACT,SAAL,GAAiB,KAAjB;AACD,GApBa;;AAAA,OAsBdU,WAtBc,GAsBA,YAAM;AAClB,IAAA,KAAI,CAACV,SAAL,GAAiB,IAAjB;AACD,GAxBa;;AAAA,OA0BdW,mBA1Bc,GA0BQ,YAAM;AAC1BlB,IAAAA,UAAU,CAACkB,mBAAX,CAA+B,KAAI,CAACV,WAApC;AACD,GA5Ba;;AAAA,OA8BdW,UA9Bc,GA8BD,YAAM;AACjBnB,IAAAA,UAAU,CAACmB,UAAX,CAAsB,KAAI,CAACX,WAA3B;AACD,GAhCa;;AACZd,EAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,C;;AAiCH,IAAM0B,IAAI,GAAGzB,QAAQ,CAAC,UAAC0B,KAAD,EAAW;AAC/B,MAAQC,IAAR,GAAiBD,KAAjB,CAAQC,IAAR;;AACA,kBAAgBvB,QAAQ,CAAC;AAAA,WAAM,IAAIM,SAAJ,EAAN;AAAA,GAAD,CAAxB;AAAA;AAAA,MAAOkB,KAAP;;AACAA,EAAAA,KAAK,CAACf,WAAN,GAAoBc,IAApB;AACA,MAAQhB,OAAR,GAA+BiB,KAA/B,CAAQjB,OAAR;AAAA,MAAiBC,SAAjB,GAA+BgB,KAA/B,CAAiBhB,SAAjB;AAEA,MAAMiB,eAAe,gBACnB;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAuB,IAAA,QAAQ,EAAED,KAAK,CAACX,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,KAAK,EAAEN,OAHT;AAIE,IAAA,QAAQ,EAAEiB,KAAK,CAACd,YAJlB;AAKE,IAAA,SAAS,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQE;AAAQ,IAAA,SAAS,EAAC,aAAlB;AAAgC,IAAA,OAAO,EAAEc,KAAK,CAACP,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCARF,eAWE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAXF,CADF;AAkBA,MAAMS,YAAY,gBAChB,uDACE;AACE,IAAA,EAAE,EAAEH,IAAI,CAACI,EADX;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,SAAS,EAAC,UAHZ;AAIE,IAAA,OAAO,EAAEJ,IAAI,CAACK,SAJhB;AAKE,IAAA,QAAQ,EAAEJ,KAAK,CAACL,mBALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQE;AACE,IAAA,SAAS,iBAAUI,IAAI,CAACK,SAAL,IAAkB,WAA5B,CADX;AAEE,IAAA,OAAO,EAAEL,IAAI,CAACI,EAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGJ,IAAI,CAACM,IAJR,CARF,eAcE;AACE,IAAA,SAAS,qBAAcN,IAAI,CAACK,SAAL,IAAkB,UAAhC,CADX;AAEE,IAAA,OAAO,EAAEJ,KAAK,CAACN,WAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAdF,eAoBE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,YAAhC;AAA6C,IAAA,OAAO,EAAEM,KAAK,CAACJ,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDApBF,CADF;AA2BA,sBAAO;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBZ,SAAS,GAAGiB,eAAH,GAAqBC,YAApD,CAAP;AACD,CApDoB,CAArB;AAsDA,eAAeL,IAAf","sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { todosState } from \"../todoState\";\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nclass TodoState {\r\n  newName = \"\";\r\n  isEditing = false;\r\n  currentTask = null;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.newName = e.target.value;\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!this.newName.trim()) {\r\n      return;\r\n    }\r\n    todosState.editTask(this.currentTask, this.newName);\r\n    this.newName = \"\";\r\n    this.isEditing = false;\r\n  };\r\n\r\n  setEditFalse = () => {\r\n    this.isEditing = false;\r\n  };\r\n\r\n  setEditTrue = () => {\r\n    this.isEditing = true;\r\n  };\r\n\r\n  toggleTaskCompleted = () => {\r\n    todosState.toggleTaskCompleted(this.currentTask);\r\n  };\r\n\r\n  deleteTask = () => {\r\n    todosState.deleteTask(this.currentTask);\r\n  };\r\n}\r\n\r\nconst Todo = observer((props) => {\r\n  const { task } = props;\r\n  const [state] = useState(() => new TodoState());\r\n  state.currentTask = task;\r\n  const { newName, isEditing } = state;\r\n\r\n  const editingTemplate = (\r\n    <form className=\"form\" onSubmit={state.handleSubmit}>\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        value={newName}\r\n        onChange={state.handleChange}\r\n        autoFocus\r\n      />\r\n      <button className=\"btn warning\" onClick={state.setEditFalse}>\r\n        Выход\r\n      </button>\r\n      <button type=\"submit\" className=\"btn success\">\r\n        Сохранить\r\n      </button>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <>\r\n      <input\r\n        id={task.id}\r\n        type=\"checkbox\"\r\n        className=\"checkbox\"\r\n        checked={task.completed}\r\n        onChange={state.toggleTaskCompleted}\r\n      />\r\n      <label\r\n        className={`text ${task.completed && \"completed\"}`}\r\n        htmlFor={task.id}\r\n      >\r\n        {task.name}\r\n      </label>\r\n      <button\r\n        className={`btn info ${task.completed && \"disabled\"}`}\r\n        onClick={state.setEditTrue}\r\n      >\r\n        Обновить\r\n      </button>\r\n      <button type=\"button\" className=\"btn danger\" onClick={state.deleteTask}>\r\n        Удалить\r\n      </button>\r\n    </>\r\n  );\r\n\r\n  return <li className=\"item\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n});\r\n\r\nexport default Todo;"]},"metadata":{},"sourceType":"module"}